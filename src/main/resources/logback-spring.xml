<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- Spring Boot 프로퍼티 참조를 위해 <springProperty> 추가 -->
    <springProperty scope="context" name="spring.log.file-path" source="spring.log.file-path"/>

    <property name="CONSOLE_LOG_PATTERN" value="%boldMagenta(%d{yyyy-MM-dd HH:mm:ss}) [%boldYellow(%-5level)] %cyan(%logger{5}.%M) - %msg %n" />
    <!--<property name="FILE_LOG_PATTERN" value="%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %5level %logger - %msg%n" />-->

    <!-- ConsoleAppender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!--Query ConsoleAppender -->
    <appender name="QSTDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <charset>UTF-8</charset>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
        </encoder>
    </appender>

    <!--<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${spring.log.file-path}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${spring.log.file-path}.%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <maxHistory>90</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <ImmediateFlush>true</ImmediateFlush>
        </encoder>
    </appender>-->

    <logger name="com.kb.inno" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- 프로젝트 패키지 안 클래스에 설정된 로그 출력 -->
    <logger name="mybatis" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- log4jdbc 옵션 설정 -->
    <logger name="jdbc" level="OFF" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- 커넥션 open close 이벤트를 로그 -->
    <logger name="jdbc.connection" level="OFF" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문 출력 -->
    <logger name="jdbc.sqlonly" level="OFF" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함하여 출력. -->
    <logger name="jdbc.sqltiming" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그 출력, 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 권장 안함. -->
    <logger name="jdbc.audit" level="OFF" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
    <logger name="jdbc.resultset" level="OFF" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>
    <!-- SQL 결과 조회된 데이터의 table로 표현하여 로그 출력 -->
    <logger name="jdbc.resultsettable" level="INFO" additivity="false">
        <appender-ref ref="CONSOLE" />
    </logger>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <!--<appender-ref ref="FILE" />-->
    </root>
</configuration>